// Ce script g√®re le calendrier, le quiz, la pens√©e du jour et le carrousel de la page jeunesse.
// --- GESTION DES DONN√âES ET √âTATS LOCAUX ---
let currentDate = new Date();
let currentQuestionIndex = 0;

// √âv√©nements du calendrier (donn√©es statiques)
let events = [
    {
        "title": "Rencontre de Jeunes",
        "description": "Th√®me : la vie en Christ.",
        "date": "2025-09-27T10:00:00Z",
        "link": "https://eglise-test.com/jeunes"
    },
    {
        "title": "Culte des familles",
        "description": "Un service sp√©cial pour les jeunes et les moins jeunes.",
        "date": "2025-10-12T11:00:00Z",
        "link": "https://eglise-test.com/familles"
    },
    {
        "title": "Journ√©e de pri√®re",
        "description": "Un moment de communion et d'intercession.",
        "date": "2025-10-25T19:00:00Z",
        "link": "https://eglise-test.com/priere"
    }
];

let quizQuestions = []; // Sera rempli par les donn√©es de l'API

// Pens√©es du jour (ces donn√©es peuvent rester statiques)
const quotes = [
    "La foi est une ferme assurance des choses qu'on esp√®re, une d√©monstration de celles qu'on ne voit pas.",
    "Tout ce que vous demandez avec foi par la pri√®re, vous le recevrez.",
    "Car l√† o√π deux ou trois sont assembl√©s en mon nom, je suis au milieu d'eux.",
    "L'√âternel est mon berger : je ne manquerai de rien.",
    "Ne vous inqui√©tez de rien; mais en toute chose faites conna√Ætre vos besoins √† Dieu."
];

// --- FONCTIONS DE R√âCUP√âRATION DES DONN√âES (API) ---

/**
 * R√©cup√®re les questions du quiz depuis l'API du serveur, les m√©lange et d√©marre le quiz.
 */
const fetchQuizQuestions = async () => {
    try {
        const response = await fetch('/api/quiz-questions');
        if (!response.ok) {
            throw new Error('Erreur de chargement du quiz');
        }
        const data = await response.json();

        // M√©lange les questions pour un ordre al√©atoire
        const shuffledData = data.sort(() => Math.random() - 0.5);

        startQuiz(shuffledData);
    } catch (error) {
        console.error('Erreur lors du chargement du quiz:', error);
        const quizContainer = document.getElementById('quiz-container');
        if (quizContainer) {
            quizContainer.innerHTML = "<p>D√©sol√©, le quiz n'a pas pu √™tre charg√©. Veuillez r√©essayer plus tard.</p>";
        }
    }
};

// --- GESTION DU CALENDRIER ---

/**
 * Affiche le calendrier du mois courant, y compris les noms de jours et les num√©ros.
 */
const renderCalendar = () => {
    const calendarElement = document.getElementById('calendar');
    calendarElement.innerHTML = '';
    const monthLabel = document.getElementById('month-label');
    const month = currentDate.getMonth();
    const year = currentDate.getFullYear();
    const firstDayOfMonth = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    monthLabel.textContent = new Date(year, month).toLocaleString('fr-fr', { month: 'long', year: 'numeric' });

    const dayNames = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];
    dayNames.forEach(day => {
        const dayHeader = document.createElement('div');
        dayHeader.className = 'calendar-header';
        dayHeader.textContent = day;
        calendarElement.appendChild(dayHeader);
    });

    for (let i = 0; i < firstDayOfMonth; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day empty';
        calendarElement.appendChild(emptyDay);
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    for (let day = 1; day <= daysInMonth; day++) {
        const dayCard = document.createElement('div');
        dayCard.className = 'calendar-day card h-100 p-2 shadow-sm';

        const fullDate = new Date(year, month, day);

        if (fullDate.getTime() === today.getTime()) {
            dayCard.classList.add('today');
        }

        const dayNumber = document.createElement('h5');
        dayNumber.className = 'card-title day-number';
        dayNumber.textContent = day;
        dayCard.appendChild(dayNumber);

        const cardBody = document.createElement('div');
        cardBody.className = 'card-body p-0';
        dayCard.appendChild(cardBody);

        const formattedDate = `${fullDate.getFullYear()}-${(fullDate.getMonth() + 1).toString().padStart(2, '0')}-${fullDate.getDate().toString().padStart(2, '0')}`;
        const dayEvents = events.filter(event => new Date(event.date).toISOString().slice(0, 10) === formattedDate);

        if (dayEvents.length > 0) {
            if (fullDate < today) {
                dayCard.classList.add('past-event');
                const eventIcon = document.createElement('i');
                eventIcon.className = 'fas fa-check event-icon past-icon';
                dayCard.appendChild(eventIcon);
            } else {
                dayCard.classList.add('has-event');
                const eventIcon = document.createElement('i');
                eventIcon.className = 'fas fa-star event-icon';
                dayCard.appendChild(eventIcon);
            }
            dayEvents.forEach(event => {
                dayCard.addEventListener('click', () => {
                    showEventModal(event);
                });
            });
        }
        calendarElement.appendChild(dayCard);
    }
};

/**
 * Affiche la fen√™tre modale avec les d√©tails de l'√©v√©nement.
 * @param {Object} event L'objet √©v√©nement √† afficher.
 */
const showEventModal = (event) => {
    const modal = document.getElementById('eventModal');
    document.getElementById('modal-title').textContent = event.title;
    document.getElementById('modal-date').textContent = new Date(event.date).toLocaleDateString('fr-fr', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
    document.getElementById('modal-description').textContent = event.description;
    const modalLink = document.getElementById('modal-link');
    if (event.link && event.link !== '#') {
        modalLink.href = event.link;
        modalLink.style.display = 'inline-block';
    } else {
        modalLink.style.display = 'none';
    }
    modal.style.display = 'block';
};

/**
 * Cache la fen√™tre modale de l'√©v√©nement.
 */
const hideEventModal = () => {
    const modal = document.getElementById('eventModal');
    modal.style.display = 'none';
};

/**
 * G√®re le changement de mois dans le calendrier.
 * @param {number} direction -1 pour le mois pr√©c√©dent, 1 pour le mois suivant.
 */
window.changeMonth = (direction) => {
    currentDate.setMonth(currentDate.getMonth() + direction);
    renderCalendar();
};

// --- GESTION DU QUIZ ---

/**
 * D√©marre le quiz avec les questions fournies.
 * @param {Array} questions Le tableau de questions du quiz.
 */
const startQuiz = (questions) => {
    if (questions && questions.length > 0) {
        quizQuestions = questions;
        document.getElementById('next-question-btn').style.display = 'none';
        showQuestion();
    } else {
        console.error("Les questions du quiz n'ont pas pu √™tre charg√©es.");
    }
};

/**
 * Affiche la question courante et ses options.
 */
const showQuestion = () => {
    const questionContainer = document.getElementById('quiz-question');
    const optionsContainer = document.getElementById('quiz-options');
    const resultContainer = document.getElementById('quiz-result');

    const currentQuestion = quizQuestions[currentQuestionIndex];
    if (!currentQuestion) {
        console.error("Erreur: Question non trouv√©e √† l'index " + currentQuestionIndex);
        return;
    }

    questionContainer.textContent = currentQuestion.question;
    optionsContainer.innerHTML = '';
    resultContainer.textContent = '';

    currentQuestion.options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'btn btn-outline-secondary';
        button.textContent = option;
        button.onclick = () => checkAnswer(option);
        optionsContainer.appendChild(button);
    });
};

/**
 * V√©rifie la r√©ponse choisie par l'utilisateur.
 * @param {string} selectedOption L'option s√©lectionn√©e par l'utilisateur.
 */
const checkAnswer = (selectedOption) => {
    const options = document.querySelectorAll('#quiz-options button');
    const resultContainer = document.getElementById('quiz-result');
    const nextButton = document.getElementById('next-question-btn');
    const currentQuestion = quizQuestions[currentQuestionIndex];
    const correctAnswer = currentQuestion.answer;

    if (selectedOption === correctAnswer) {
        resultContainer.textContent = "Correct ! üéâ";
        resultContainer.style.color = 'green';
    } else {
        resultContainer.textContent = `Incorrect. La bonne r√©ponse est : ${correctAnswer}`;
        resultContainer.style.color = 'red';

        const wrongButton = Array.from(options).find(btn => btn.textContent === selectedOption);
        if (wrongButton) {
            wrongButton.classList.add('btn-danger');
        }
    }

    options.forEach(button => {
        button.disabled = true;
        if (button.textContent === correctAnswer) {
            button.classList.add('btn-success');
        }
    });

    nextButton.style.display = 'block';
};

/**
 * Passe √† la question suivante du quiz.
 */
const nextQuestion = () => {
    currentQuestionIndex = (currentQuestionIndex + 1) % quizQuestions.length;
    showQuestion();
};

// --- GESTION DU CARROUSEL ---

const sliderImages = document.querySelectorAll('.slider-image');
let currentSlide = 0;

const nextSlide = () => {
    if (sliderImages.length === 0) return;
    sliderImages[currentSlide].classList.remove('active');
    currentSlide = (currentSlide + 1) % sliderImages.length;
    sliderImages[currentSlide].classList.add('active');
};

setInterval(nextSlide, 5000);

// --- GESTION DE LA PENS√âE DU JOUR ---

/**
 * Affiche une pens√©e du jour diff√©rente.
 */
const displayDailyQuote = () => {
    const today = new Date().toISOString().slice(0, 10);
    const quoteIndex = today.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0) % quotes.length;
    document.getElementById('daily-quote').textContent = quotes[quoteIndex];
};

// --- INITIALISATION DE LA PAGE ---

document.addEventListener('DOMContentLoaded', () => {
    // Liez les boutons du quiz
    const nextQuestionBtn = document.getElementById('next-question-btn');
    if (nextQuestionBtn) {
        nextQuestionBtn.addEventListener('click', nextQuestion);
    }

    // Liez les √©v√©nements de la modale
    const modal = document.getElementById('eventModal');
    const closeBtn = document.getElementsByClassName('close-btn')[0];
    if (closeBtn) {
        closeBtn.onclick = hideEventModal;
    }
    window.onclick = (event) => {
        if (event.target == modal) {
            hideEventModal();
        }
    };

    // Charge toutes les donn√©es et rend l'interface
    renderCalendar();
    fetchQuizQuestions(); // Cet appel charge les questions depuis l'API
    displayDailyQuote();
});